{
	"name": "transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fromlakeinputdate",
						"type": "DatasetReference"
					},
					"name": "date"
				},
				{
					"dataset": {
						"referenceName": "fromlakeregioninput",
						"type": "DatasetReference"
					},
					"name": "region"
				},
				{
					"dataset": {
						"referenceName": "frominputlakewheather",
						"type": "DatasetReference"
					},
					"name": "wheatherme"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsDate",
						"type": "DatasetReference"
					},
					"name": "sinktransformationdate",
					"description": "Export data to date cleaner"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTableregion",
						"type": "DatasetReference"
					},
					"name": "sinkfactoryregion"
				},
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTablewheather",
						"type": "DatasetReference"
					},
					"name": "sinkfactorywheather"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          DateID as integer,",
				"          Date as date 'yyyy-MM-dd',",
				"          year as integer,",
				"          month as integer,",
				"          day as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> date",
				"source(output(",
				"          RegionID as integer,",
				"          RegionName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> region",
				"source(output(",
				"          DateID as integer,",
				"          RegionID as integer,",
				"          AverageTemperature as integer,",
				"          Humidity as integer,",
				"          WindSpeed as integer,",
				"          Rainfall as integer,",
				"          SunshineHours as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> wheatherme",
				"date sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinktransformationdate",
				"region sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkfactoryregion",
				"wheatherme sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkfactorywheather"
			]
		}
	}
}